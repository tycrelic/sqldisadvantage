/* SqlParser.java */
/* Generated By:JavaCC: Do not edit this line. SqlParser.java */
package com.github.tycrelic.sqldisadvantage.parser;

import com.github.tycrelic.sqldisadvantage.command.Statement;
import com.github.tycrelic.sqldisadvantage.command.DefineCommand;
import com.github.tycrelic.sqldisadvantage.command.SetCommand;
import com.github.tycrelic.sqldisadvantage.command.ColumnCommand;
import com.github.tycrelic.sqldisadvantage.command.SpoolCommand;
import com.github.tycrelic.sqldisadvantage.command.Command;
import java.util.*;

/**
 * The parser generated by JavaCC
 */
public class SqlParser implements SqlParserConstants {
  private ClientEnvironment env;
  public void parse(ClientEnvironment env) throws ParseException {
    this.env = env;
    Commands();
  }

  private static String unquote(String str) {
    if(str.startsWith("'")) {
      return str.substring(1, str.length()-1).replace("''", "'");
    }
    else {
      return str;
    }
        }

  private static final String extractOriginalText(Token firstToken, Token lastToken) {
    Token t = firstToken;
    Token et = lastToken.next;

    StringBuilder buf = new StringBuilder();
    while(t != null && t != et) {
      if (t.specialToken != null) {
          Token st = t.specialToken;
          while (st.specialToken != null) st = st.specialToken;
          while (st != null) {
            buf.append(st.image);
            st = st.next;
          }
      }
      buf.append(t.image);
      t = t.next;
    }
    return buf.toString();
  }

  private void addCommand(Command cmd, Token firstToken, Token lastToken) {
      cmd.setBeginLine(firstToken.beginLine);
      cmd.setBeginColumn(firstToken.beginColumn);
      cmd.setEndLine(lastToken.endLine);
      cmd.setEndColumn(lastToken.endColumn);

      cmd.setText(extractOriginalText(firstToken, lastToken));
      env.addCommand(cmd);
  }

  final public void Commands() throws ParseException {Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SELECT:
      case CALL:
      case COLUMN:
      case DEFINE:
      case SET:
      case SPOOL:
      case SEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLUMN:
      case DEFINE:
      case SET:
      case SPOOL:{
        SqlClientCommand();
        break;
        }
      case SELECT:
      case CALL:{
        Statement();
        break;
        }
      case SEMICOLON:{
        t = jj_consume_token(SEMICOLON);
Command cmd = new Command();
      addCommand(cmd, t, t);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = jj_consume_token(0);
Command cmd = new Command();
    addCommand(cmd, t, t);
  }

  final public void SqlClientCommand() throws ParseException {Token t1;
  Token t2 = null;
  Token t3 = null;

  Token et;
  Command cmd;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SET:{
      t1 = jj_consume_token(SET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SET_APPINFO:{
        t2 = jj_consume_token(SET_APPINFO);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_ARRAYSIZE:{
        t2 = jj_consume_token(SET_ARRAYSIZE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_AUTOCOMMIT:{
        t2 = jj_consume_token(SET_AUTOCOMMIT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_AUTOPRINT:{
        t2 = jj_consume_token(SET_AUTOPRINT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_AUTORECOVERY:{
        t2 = jj_consume_token(SET_AUTORECOVERY);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_AUTOTRACE:{
        t2 = jj_consume_token(SET_AUTOTRACE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_BLOCKTERMINATOR:{
        t2 = jj_consume_token(SET_BLOCKTERMINATOR);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_CMDSEP:{
        t2 = jj_consume_token(SET_CMDSEP);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_COLSEP:{
        t2 = jj_consume_token(SET_COLSEP);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_CONCAT:{
        t2 = jj_consume_token(SET_CONCAT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_COPYCOMMIT:{
        t2 = jj_consume_token(SET_COPYCOMMIT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_COPYTYPECHECK:{
        t2 = jj_consume_token(SET_COPYTYPECHECK);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_DEFINE:{
        t2 = jj_consume_token(SET_DEFINE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_DESCRIBE:{
        t2 = jj_consume_token(SET_DESCRIBE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_ECHO:{
        t2 = jj_consume_token(SET_ECHO);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_EDITFILE:{
        t2 = jj_consume_token(SET_EDITFILE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_EMBEDDED:{
        t2 = jj_consume_token(SET_EMBEDDED);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_ERRORLOGGING:{
        t2 = jj_consume_token(SET_ERRORLOGGING);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_ESCAPE:{
        t2 = jj_consume_token(SET_ESCAPE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_ESCCHAR:{
        t2 = jj_consume_token(SET_ESCCHAR);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_EXITCOMMIT:{
        t2 = jj_consume_token(SET_EXITCOMMIT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_FEEDBACK:{
        t2 = jj_consume_token(SET_FEEDBACK);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_FLAGGER:{
        t2 = jj_consume_token(SET_FLAGGER);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_FLUSH:{
        t2 = jj_consume_token(SET_FLUSH);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_HEADING:{
        t2 = jj_consume_token(SET_HEADING);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_HEADSEP:{
        t2 = jj_consume_token(SET_HEADSEP);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_INSTANCE:{
        t2 = jj_consume_token(SET_INSTANCE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_LINESIZE:{
        t2 = jj_consume_token(SET_LINESIZE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_LOBOFFSET:{
        t2 = jj_consume_token(SET_LOBOFFSET);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_LOGSOURCE:{
        t2 = jj_consume_token(SET_LOGSOURCE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_LONG:{
        t2 = jj_consume_token(SET_LONG);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_LONGCHUNKSIZE:{
        t2 = jj_consume_token(SET_LONGCHUNKSIZE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_MARKUP:{
        t2 = jj_consume_token(SET_MARKUP);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_NEWPAGE:{
        t2 = jj_consume_token(SET_NEWPAGE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_NULL:{
        t2 = jj_consume_token(SET_NULL);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_NUMFORMAT:{
        t2 = jj_consume_token(SET_NUMFORMAT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_NUMWIDTH:{
        t2 = jj_consume_token(SET_NUMWIDTH);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_OUTPUTFORMAT:{
        t2 = jj_consume_token(SET_OUTPUTFORMAT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_PAGESIZE:{
        t2 = jj_consume_token(SET_PAGESIZE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_PAUSE:{
        t2 = jj_consume_token(SET_PAUSE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_RECSEP:{
        t2 = jj_consume_token(SET_RECSEP);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_RECSEPCHAR:{
        t2 = jj_consume_token(SET_RECSEPCHAR);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SERVEROUTPUT:{
        t2 = jj_consume_token(SET_SERVEROUTPUT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SHIFTINOUT:{
        t2 = jj_consume_token(SET_SHIFTINOUT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SHOWMODE:{
        t2 = jj_consume_token(SET_SHOWMODE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLBLANKLINES:{
        t2 = jj_consume_token(SET_SQLBLANKLINES);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLCASE:{
        t2 = jj_consume_token(SET_SQLCASE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLCONTINUE:{
        t2 = jj_consume_token(SET_SQLCONTINUE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLNUMBER:{
        t2 = jj_consume_token(SET_SQLNUMBER);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLPLUSCOMPATIBILITY:{
        t2 = jj_consume_token(SET_SQLPLUSCOMPATIBILITY);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLPREFIX:{
        t2 = jj_consume_token(SET_SQLPREFIX);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLPROMPT:{
        t2 = jj_consume_token(SET_SQLPROMPT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SQLTERMINATOR:{
        t2 = jj_consume_token(SET_SQLTERMINATOR);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_SUFFIX:{
        t2 = jj_consume_token(SET_SUFFIX);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_TAB:{
        t2 = jj_consume_token(SET_TAB);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_TERMOUT:{
        t2 = jj_consume_token(SET_TERMOUT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_TIME:{
        t2 = jj_consume_token(SET_TIME);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_TIMING:{
        t2 = jj_consume_token(SET_TIMING);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_TRIMOUT:{
        t2 = jj_consume_token(SET_TRIMOUT);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_TRIMSPOOL:{
        t2 = jj_consume_token(SET_TRIMSPOOL);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_UNDERLINE:{
        t2 = jj_consume_token(SET_UNDERLINE);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_VERIFY:{
        t2 = jj_consume_token(SET_VERIFY);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_WRAP:{
        t2 = jj_consume_token(SET_WRAP);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_XMLOPTIMIZATIONCHECK:{
        t2 = jj_consume_token(SET_XMLOPTIMIZATIONCHECK);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case SET_XQUERY:{
        t2 = jj_consume_token(SET_XQUERY);
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
SetCommand setCmd = new SetCommand();
      setCmd.setName(t2.image);
      setCmd.setValue(t3.image);
      et = t3;
      cmd = setCmd;
      break;
      }
    case DEFINE:{
      t1 = jj_consume_token(DEFINE);
      t2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(EQUAL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NO_SPACE_VALUE:{
        t3 = jj_consume_token(NO_SPACE_VALUE);
        break;
        }
      case IDENTIFIER:{
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      case FLOATING_POINT_LITERAL:{
        t3 = jj_consume_token(FLOATING_POINT_LITERAL);
        break;
        }
      case INTEGER_LITERAL:{
        t3 = jj_consume_token(INTEGER_LITERAL);
        break;
        }
      case CHAR_LITERAL:{
        t3 = jj_consume_token(CHAR_LITERAL);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
DefineCommand defineCmd = new DefineCommand();
      defineCmd.setName(t2.image);
      defineCmd.setValue(t3.image);
      et = t3;
      cmd = defineCmd;
      break;
      }
    case COLUMN:{
      t1 = jj_consume_token(COLUMN);
      t2 = jj_consume_token(IDENTIFIER);
      jj_consume_token(NEW_VALUE);
      t3 = jj_consume_token(IDENTIFIER);
ColumnCommand columnCmd = new ColumnCommand();
      columnCmd.setColumnName(t2.image);
      columnCmd.setVariableName(t3.image);
      et = t3;
      cmd = columnCmd;
      break;
      }
    case SPOOL:{
      t1 = jj_consume_token(SPOOL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHAR_LITERAL:
      case NO_SPACE_VALUE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NO_SPACE_VALUE:{
          t2 = jj_consume_token(NO_SPACE_VALUE);
          break;
          }
        case CHAR_LITERAL:{
          t2 = jj_consume_token(CHAR_LITERAL);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        t3 = jj_consume_token(IDENTIFIER);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
SpoolCommand spoolCmd = new SpoolCommand();
      et = t1;

      if(t2 != null) {
        String filName = unquote(t2.image);
        spoolCmd.setFileName(filName);
        et = t2;
      }

      if(t3 != null) {
        spoolCmd.setMode(t3.image);
        et = t3;
      }

      cmd = spoolCmd;
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CMD_NEW_LINE:
    case SEMICOLON:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        et = jj_consume_token(SEMICOLON);
        break;
        }
      case CMD_NEW_LINE:{
        et = jj_consume_token(CMD_NEW_LINE);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
addCommand(cmd, t1, et);
  }

  final public void Statement() throws ParseException {Statement cmd = new Statement();
  Token t1;
  Token t2;
  Token et;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SELECT:{
      t1 = jj_consume_token(SELECT);
      label_2:
      while (true) {
        t2 = jj_consume_token(ANYTHING);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ANYTHING:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_2;
        }
      }
cmd.setQueryable(true);
      cmd.setSql(extractOriginalText(t1, t2));
      et = t2;
      break;
      }
    case CALL:{
      t1 = jj_consume_token(CALL);
      label_3:
      while (true) {
        t2 = jj_consume_token(ANYTHING);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ANYTHING:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
      }
cmd.setQueryable(false);
      cmd.setSql(extractOriginalText(t1, t2));
      et = t2;
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SEMICOLON:{
      et = jj_consume_token(SEMICOLON);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
addCommand(cmd, t1, et);
  }

  /** Generated Token Manager. */
  public SqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x44000300,0x44000300,0x0,0x0,0x0,0x0,0x0,0x44000000,0x2000,0x2000,0x0,0x0,0x300,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x900000,0x900000,0x0,0x0,0x0,0x0,0x0,0x900000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0xffffff00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0xffffffff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x20000,0x20000,0x1ff,0x209600,0x208000,0x208000,0x1000,0x0,0x20000,0x20000,0x100000,0x100000,0x0,0x20000,};
   }

  /** Constructor. */
  public SqlParser(Provider stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SqlParser(String dsl) throws ParseException, TokenMgrException {
      this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
     ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new SqlParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SqlParser(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[150];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 150; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : SqlParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
