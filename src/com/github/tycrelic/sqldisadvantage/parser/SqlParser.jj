options{
  IGNORE_CASE=true;
  STATIC=false;
  //DEBUG_PARSER=true;
  //DEBUG_LOOKAHEAD=true;
  //FORCE_LA_CHECK=true;
  //DEBUG_TOKEN_MANAGER=true;
  UNICODE_INPUT=true;
  //USER_CHAR_STREAM=true;
  //GENERATE_BOILERPLATE = false;
  JAVA_TEMPLATE_TYPE = "modern";
}

PARSER_BEGIN(SqlParser)

package com.github.tycrelic.sqldisadvantage.parser;

import com.github.tycrelic.sqldisadvantage.command.*;
import java.util.*;

/**
 * The parser generated by JavaCC
 */
public class SqlParser {
  private ClientEnvironment env;
  public void parse(ClientEnvironment env) throws ParseException {
    this.env = env;
    Commands();
  }
	
  private static String unquote(String str) {
    if(str.startsWith("'")) {
      return str.substring(1, str.length()-1).replace("''", "'");
    }
    else {
      return str;
    }
	}
  
  private static final String extractOriginalText(Token firstToken, Token lastToken) {
    Token t = firstToken;
    Token et = lastToken.next;

    StringBuilder buf = new StringBuilder();
    while(t != null && t != et) {
      if (t.specialToken != null) {
          Token st = t.specialToken;
          while (st.specialToken != null) st = st.specialToken;
          while (st != null) {
            buf.append(st.image);
            st = st.next;
          }
      }
      buf.append(t.image);
      t = t.next;
    }
    return buf.toString();
  }
  
  private void addCommand(Command cmd, Token firstToken, Token lastToken) {
      cmd.setBeginLine(firstToken.beginLine);
      cmd.setBeginColumn(firstToken.beginColumn);
      cmd.setEndLine(lastToken.endLine);
      cmd.setEndColumn(lastToken.endColumn);

      cmd.setText(extractOriginalText(firstToken, lastToken));
      env.addCommand(cmd);
  }
} 

PARSER_END(SqlParser)

<*>
SPECIAL_TOKEN: //SKIP:
{
  " "
| "\t"
}

SPECIAL_TOKEN: //SKIP:
{
  "\r"
| "\n"
}

<IN_SQL>
SPECIAL_TOKEN: //SKIP:
{
  "\r"
| "\n"
}

<*>
TOKEN: 
{
  <LPAREN: "(" >
| <SELECT:"SELECT">       : IN_SQL
| <CALL:"CALL">       : IN_SQL
}

<IN_CLIENT_CMD, IN_SET, IN_NO_SPACE_VALUE>
TOKEN:
{
  <ROLE:"ROLE"> : IN_SQL
| <TRANSACTION:"TRANSACTION"> : IN_SQL
| <NEW_VALUE:("NEW_V"|"NEW_VALUE")>
| <CMD_NEW_LINE:("\r"|"\r\n"|"\n")> : DEFAULT
| <EQUAL:"="> : IN_NO_SPACE_VALUE
}

TOKEN: /* Commands. lexical state of SQL client commands is DEFAULT */
{
  <AT_SIGN:"@">                       : IN_CLIENT_CMD
| <DOUBLE_AT_SIGN:"@@">               : IN_CLIENT_CMD
| <SLASH:"/">                         : IN_CLIENT_CMD
| <ACCEPT:("ACCEPT"|"ACC")>           : IN_CLIENT_CMD
| <APPEND:("APPEND"|"A")>             : IN_CLIENT_CMD
| <ARCHIVE:("ARCHIVE"|"ARCHIVE")>     : IN_CLIENT_CMD
| <ATTRIBUTE:("ATTRIBUTE"|"ATTR")>    : IN_CLIENT_CMD
| <BREAK:("BREAK"|"BRE")>             : IN_CLIENT_CMD
| <BTITLE:("BTITLE"|"BTI")>           : IN_CLIENT_CMD
| <CHANGE:("CHANGE"|"C")>             : IN_CLIENT_CMD
| <CLEAR:("CLEAR"|"CL")>              : IN_CLIENT_CMD
| <COLUMN:("COLUMN"|"COL")>           : IN_CLIENT_CMD
| <COMPUTE:("COMPUTE"|"COMP")>        : IN_CLIENT_CMD
| <CONNECT:("CONNECT"|"CONN")>        : IN_CLIENT_CMD
| <COPY:"COPY">                       : IN_CLIENT_CMD
| <DEFINE:("DEFINE"|"DEF")>           : IN_CLIENT_CMD
| <DEL:("DEL"|"DEL")>                 : IN_CLIENT_CMD
| <DESCRIBE:("DESCRIBE"|"DESC")>      : IN_CLIENT_CMD
| <DISCONNECT:("DISCONNECT"|"DISC")>  : IN_CLIENT_CMD
| <EDIT:("EDIT"|"ED")>                : IN_CLIENT_CMD
| <EXECUTE:("EXECUTE"|"EXEC")>        : IN_CLIENT_CMD
| <EXIT:("QUIT"|"EXIT")>              : IN_CLIENT_CMD
| <GET:"GET">                         : IN_CLIENT_CMD
| <HELP:"HELP">                       : IN_CLIENT_CMD
| <HOST:("HOST"|"HO")>                : IN_CLIENT_CMD
| <INPUT:("INPUT"|"I")>               : IN_CLIENT_CMD
| <LIST:("LIST"|"L")>                 : IN_CLIENT_CMD
| <PASSWORD:("PASSWORD"|"PASSW")>     : IN_CLIENT_CMD
| <PAUSE:("PAUSE"|"PAU")>             : IN_CLIENT_CMD
| <PRINT:("PRINT"|"PRINT")>           : IN_CLIENT_CMD
| <PROMPT:("PROMPT"|"PRO")>           : IN_CLIENT_CMD
| <RECOVER:("RECOVER"|"RECOVER")>     : IN_CLIENT_CMD
| <REMARK:("REMARK"|"REM")>           : IN_CLIENT_CMD
| <REPFOOTER:("REPFOOTER"|"REPF")>    : IN_CLIENT_CMD
| <REPHEADER:("REPHEADER"|"REPH")>    : IN_CLIENT_CMD
| <RUN:("RUN"|"R")>                   : IN_CLIENT_CMD
| <SAVE:("SAVE"|"SAV")>               : IN_CLIENT_CMD
| <SET:"SET">                         : IN_SET
| <SHOW:("SHOW"|"SHO")>               : IN_CLIENT_CMD
| <SHUTDOWN:"SHUTDOWN">               : IN_CLIENT_CMD
| <SPOOL:("SPOOL"|"SPO")>             : IN_CLIENT_CMD
| <START:("START"|"STA")>             : IN_CLIENT_CMD
| <STARTUP:("STARTUP"|"STARTUP")>     : IN_CLIENT_CMD
| <STORE:"STORE">                     : IN_CLIENT_CMD
| <TIMING:("TIMING"|"TIMI")>          : IN_CLIENT_CMD
| <TTITLE:("TTITLE"|"TTITLE")>        : IN_CLIENT_CMD
| <UNDEFINE:("UNDEFINE"|"UNDEF")>     : IN_CLIENT_CMD
| <VARIABLE:("VARIABLE"|"VAR")>       : IN_CLIENT_CMD
| <WHENEVER:("WHENEVER"|"WHENEVER")>  : IN_CLIENT_CMD
| <XQUERY:("XQUERY"|"XQUERY")>        : IN_CLIENT_CMD

//| <LPAREN: "(" >                      : IN_CLIENT_CMD
| <CREATE:"CREATE">                   : IN_SQL
| <DELETE:"DELETE">                   : IN_SQL
| <DROP:"DROP">                       : IN_SQL
| <INSERT:"INSERT">                   : IN_SQL
| <LOAD:"LOAD">                       : IN_SQL //extension
| <REPLACE:"REPLACE">                 : IN_SQL
//| <SELECT:"SELECT">                   : IN_SQL
| <TRUNCATE:"TRUNCATE">               : IN_SQL
| <UPDATE:"UPDATE">                   : IN_SQL
}


<IN_SET>
TOKEN:
{
  <SET_APPINFO:("APPINFO"|"APPI")>
| <SET_ARRAYSIZE:("ARRAYSIZE"|"ARRAY")>
| <SET_AUTOCOMMIT:("AUTOCOMMIT"|"AUTO")>
| <SET_AUTOPRINT:("AUTOPRINT"|"AUTOP")>
| <SET_AUTORECOVERY:("AUTORECOVERY"|"AUTORECOVERY")>
| <SET_AUTOTRACE:("AUTOTRACE"|"AUTOT")>
| <SET_BLOCKTERMINATOR:("BLOCKTERMINATOR"|"BLO")>
| <SET_CMDSEP:("CMDSEP"|"CMDS")>
| <SET_COLSEP:"COLSEP">
| <SET_CONCAT:("CONCAT"|"CON")>
| <SET_COPYCOMMIT:("COPYCOMMIT"|"COPYC")>
| <SET_COPYTYPECHECK:"COPYTYPECHECK">
| <SET_DEFINE:("DEFINE"|"DEF")>
| <SET_DESCRIBE:"DESCRIBE">
| <SET_ECHO:"ECHO">
| <SET_EDITFILE:("EDITFILE"|"EDITF")>
| <SET_EMBEDDED:("EMBEDDED"|"EMB")>
| <SET_ERRORLOGGING:("ERRORLOGGING"|"ERRORL")>
| <SET_ESCAPE:("ESCAPE"|"ESC")>
| <SET_ESCCHAR:"ESCCHAR">
| <SET_EXITCOMMIT:("EXITCOMMIT"|"EXITC")>
| <SET_FEEDBACK:("FEEDBACK"|"FEED")>
| <SET_FLAGGER:"FLAGGER">
| <SET_FLUSH:("FLUSH"|"FLU")>
| <SET_HEADING:("HEADING"|"HEA")>
| <SET_HEADSEP:("HEADSEP"|"HEADSEP")>
| <SET_INSTANCE:"INSTANCE">
| <SET_LINESIZE:("LINESIZE"|"LIN")>
| <SET_LOBOFFSET:("LOBOFFSET"|"LOBOF")>
| <SET_LOGSOURCE:"LOGSOURCE">
| <SET_LONG:"LONG">
| <SET_LONGCHUNKSIZE:("LONGCHUNKSIZE"|"LONGC")>
| <SET_MARKUP:("MARKUP"|"MARK")>
| <SET_NEWPAGE:("NEWPAGE"|"NEW")>
| <SET_NULL:"NULL">
| <SET_NUMFORMAT:("NUMFORMAT"|"NUMF")>
| <SET_NUMWIDTH:("NUMWIDTH"|"NUM")>
| <SET_OUTPUTFORMAT:"OUTPUTFORMAT"> // extension
| <SET_PAGESIZE:("PAGESIZE"|"PAGES")>
| <SET_PAUSE:("PAUSE"|"PAU")>
| <SET_RECSEP:"RECSEP">
| <SET_RECSEPCHAR:"RECSEPCHAR">
| <SET_SERVEROUTPUT:("SERVEROUTPUT"|"SERVEROUT")>
| <SET_SHIFTINOUT:("SHIFTINOUT"|"SHIFT")>
| <SET_SHOWMODE:("SHOWMODE"|"SHOW")>
| <SET_SQLBLANKLINES:("SQLBLANKLINES"|"SQLBL")>
| <SET_SQLCASE:("SQLCASE"|"SQLC")>
| <SET_SQLCONTINUE:("SQLCONTINUE"|"SQLCO")>
| <SET_SQLNUMBER:("SQLNUMBER"|"SQLN")>
| <SET_SQLPLUSCOMPATIBILITY:("SQLPLUSCOMPATIBILITY"|"SQLPLUSCOMPAT")>
| <SET_SQLPREFIX:("SQLPREFIX"|"SQLPRE")>
| <SET_SQLPROMPT:("SQLPROMPT"|"SQLP")>
| <SET_SQLTERMINATOR:("SQLTERMINATOR"|"SQLT")>
| <SET_SUFFIX:("SUFFIX"|"SUF")>
| <SET_TAB:"TAB">
| <SET_TERMOUT:("TERMOUT"|"TERM")>
| <SET_TIME:("TIME"|"TI")>
| <SET_TIMING:("TIMING"|"TIMI")>
| <SET_TRIMOUT:("TRIMOUT"|"TRIM")>
| <SET_TRIMSPOOL:("TRIMSPOOL"|"TRIMS")>
| <SET_UNDERLINE:("UNDERLINE"|"UND")>
| <SET_VERIFY:("VERIFY"|"VER")>
| <SET_WRAP:("WRAP"|"WRA")>
| <SET_XMLOPTIMIZATIONCHECK:("XMLOPTIMIZATIONCHECK"|"XMLOPT")>
| <SET_XQUERY:"XQUERY">
}


<*>
TOKEN : /* Numeric Constants */
{
	<FLOATING_POINT_LITERAL: ((<INTEGER_LITERAL>)? "." <INTEGER_LITERAL> ( ["e","E"] ([ "-","+"])? <INTEGER_LITERAL> )? 
				|
				<INTEGER_LITERAL> "." (["e","E"] ([ "-","+"])? <INTEGER_LITERAL>)?
				|
				<INTEGER_LITERAL> ["e","E"] ([ "-","+"])? <INTEGER_LITERAL>
				)>
  | 	<INTEGER_LITERAL: ( <DIGIT> )+ >
  | 	<#DIGIT: ["0" - "9"] >

}


<*>
TOKEN:
{
	<IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> | <SPECIAL_CHARS>)* >
| 	<#LETTER: ["a"-"z", "A"-"Z", "_"] >
|   <#SPECIAL_CHARS: "$" | "_">
|   <CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
|   <QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" | ("`" (~["\n","\r","`"])* "`") | ("[" (~["\n","\r","]"])* "]") >
}

<*>
TOKEN:
{
  <SEMICOLON:";"> : DEFAULT
}

<*>
SPECIAL_TOKEN:
{
  <LINE_COMMENT: "--"(~["\r","\n"])*>
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}



<IN_SQL>
TOKEN:
{
  <ANYTHING: (~[";", "-", "/"] | "-" ~["-"] | "/" ~["*"])+>
}

<IN_NO_SPACE_VALUE>
TOKEN:
{
  <NO_SPACE_VALUE:(~[" ", "\t", ";", "\r", "\n"])+> : IN_CLIENT_CMD
/*| <SPOOL_CREATE:("CRE"|"CREATE")>
| <SPOOL_REPLACE:("REP"|"REPLACE")>
| <SPOOL_APPEND:("APP"|"APPEND")>
| <SPOOL_OFF:"OFF">
| <SPOOL_OUT:"OUT">*/
}

void Commands() :
{
  Token t;
}
{
  (
    SqlClientCommand()
  |
    Statement()
  |
    t=";"
    {
      Command cmd = new Command();
      addCommand(cmd, t, t);
    }
  ) *
  t=<EOF>
  {
    Command cmd = new Command();
    addCommand(cmd, t, t);
  }
}

void SqlClientCommand() :
{
  Token t1;
  Token t2 = null;
  Token t3 = null;
  
  Token et;
  Command cmd;
}
{
  (
    t1=<SET>
    (
      t2=<SET_APPINFO> t3=<IDENTIFIER>
    | t2=<SET_ARRAYSIZE> t3=<IDENTIFIER>
    | t2=<SET_AUTOCOMMIT> t3=<IDENTIFIER>
    | t2=<SET_AUTOPRINT> t3=<IDENTIFIER>
    | t2=<SET_AUTORECOVERY> t3=<IDENTIFIER>
    | t2=<SET_AUTOTRACE> t3=<IDENTIFIER>
    | t2=<SET_BLOCKTERMINATOR> t3=<IDENTIFIER>
    | t2=<SET_CMDSEP> t3=<IDENTIFIER>
    | t2=<SET_COLSEP> t3=<IDENTIFIER>
    | t2=<SET_CONCAT> t3=<IDENTIFIER>
    | t2=<SET_COPYCOMMIT> t3=<IDENTIFIER>
    | t2=<SET_COPYTYPECHECK> t3=<IDENTIFIER>
    | t2=<SET_DEFINE> t3=<IDENTIFIER>
    | t2=<SET_DESCRIBE> t3=<IDENTIFIER>
    | t2=<SET_ECHO> t3=<IDENTIFIER>
    | t2=<SET_EDITFILE> t3=<IDENTIFIER>
    | t2=<SET_EMBEDDED> t3=<IDENTIFIER>
    | t2=<SET_ERRORLOGGING> t3=<IDENTIFIER>
    | t2=<SET_ESCAPE> t3=<IDENTIFIER>
    | t2=<SET_ESCCHAR> t3=<IDENTIFIER>
    | t2=<SET_EXITCOMMIT> t3=<IDENTIFIER>
    | t2=<SET_FEEDBACK> t3=<IDENTIFIER>
    | t2=<SET_FLAGGER> t3=<IDENTIFIER>
    | t2=<SET_FLUSH> t3=<IDENTIFIER>
    | t2=<SET_HEADING> t3=<IDENTIFIER>
    | t2=<SET_HEADSEP> t3=<IDENTIFIER>
    | t2=<SET_INSTANCE> t3=<IDENTIFIER>
    | t2=<SET_LINESIZE> t3=<IDENTIFIER>
    | t2=<SET_LOBOFFSET> t3=<IDENTIFIER>
    | t2=<SET_LOGSOURCE> t3=<IDENTIFIER>
    | t2=<SET_LONG> t3=<IDENTIFIER>
    | t2=<SET_LONGCHUNKSIZE> t3=<IDENTIFIER>
    | t2=<SET_MARKUP> t3=<IDENTIFIER>
    | t2=<SET_NEWPAGE> t3=<IDENTIFIER>
    | t2=<SET_NULL> t3=<IDENTIFIER>
    | t2=<SET_NUMFORMAT> t3=<IDENTIFIER>
    | t2=<SET_NUMWIDTH> t3=<IDENTIFIER>
    | t2=<SET_OUTPUTFORMAT> t3=<IDENTIFIER> // extension
    | t2=<SET_PAGESIZE> t3=<IDENTIFIER>
    | t2=<SET_PAUSE> t3=<IDENTIFIER>
    | t2=<SET_RECSEP> t3=<IDENTIFIER>
    | t2=<SET_RECSEPCHAR> t3=<IDENTIFIER>
    | t2=<SET_SERVEROUTPUT> t3=<IDENTIFIER>
    | t2=<SET_SHIFTINOUT> t3=<IDENTIFIER>
    | t2=<SET_SHOWMODE> t3=<IDENTIFIER>
    | t2=<SET_SQLBLANKLINES> t3=<IDENTIFIER>
    | t2=<SET_SQLCASE> t3=<IDENTIFIER>
    | t2=<SET_SQLCONTINUE> t3=<IDENTIFIER>
    | t2=<SET_SQLNUMBER> t3=<IDENTIFIER>
    | t2=<SET_SQLPLUSCOMPATIBILITY> t3=<IDENTIFIER>
    | t2=<SET_SQLPREFIX> t3=<IDENTIFIER>
    | t2=<SET_SQLPROMPT> t3=<IDENTIFIER>
    | t2=<SET_SQLTERMINATOR> t3=<IDENTIFIER>
    | t2=<SET_SUFFIX> t3=<IDENTIFIER>
    | t2=<SET_TAB> t3=<IDENTIFIER>
    | t2=<SET_TERMOUT> t3=<IDENTIFIER>
    | t2=<SET_TIME> t3=<IDENTIFIER>
    | t2=<SET_TIMING> t3=<IDENTIFIER>
    | t2=<SET_TRIMOUT> t3=<IDENTIFIER>
    | t2=<SET_TRIMSPOOL> t3=<IDENTIFIER>
    | t2=<SET_UNDERLINE> t3=<IDENTIFIER>
    | t2=<SET_VERIFY> t3=<IDENTIFIER>
    | t2=<SET_WRAP> t3=<IDENTIFIER>
    | t2=<SET_XMLOPTIMIZATIONCHECK> t3=<IDENTIFIER>
    | t2=<SET_XQUERY> t3=<IDENTIFIER>
    )
    {
      SetCommand setCmd = new SetCommand();
      setCmd.setName(t2.image);
      setCmd.setValue(t3.image);
      et = t3;
      cmd = setCmd;
    }
  |
    t1=<DEFINE> t2=<IDENTIFIER> <EQUAL> (t3=<NO_SPACE_VALUE>|t3=<IDENTIFIER>|t3=<FLOATING_POINT_LITERAL>|t3=<INTEGER_LITERAL>|t3=<CHAR_LITERAL>)
    {
      DefineCommand defineCmd = new DefineCommand();
      defineCmd.setName(t2.image);
      defineCmd.setValue(t3.image);
      et = t3;
      cmd = defineCmd;
    }
  |
    t1=<COLUMN> t2=<IDENTIFIER> <NEW_VALUE> t3=<IDENTIFIER>
    {
      ColumnCommand columnCmd = new ColumnCommand();
      columnCmd.setColumnName(t2.image);
      columnCmd.setVariableName(t3.image);
      et = t3;
      cmd = columnCmd;
    }
  |
    t1=<SPOOL> [(t2=<NO_SPACE_VALUE>|t2=<CHAR_LITERAL>)] [t3=<IDENTIFIER>]
    {
      SpoolCommand spoolCmd = new SpoolCommand();
      et = t1;

      if(t2 != null) {
        String filName = unquote(t2.image);
        spoolCmd.setFileName(filName);
        et = t2;
      }

      if(t3 != null) {
        spoolCmd.setMode(t3.image);
        et = t3;
      }

      cmd = spoolCmd;
    }
  )
  (LOOKAHEAD(1) et=";"|et=<CMD_NEW_LINE>)?
  {
    addCommand(cmd, t1, et);
  }
}


void Statement():
{
  Statement cmd = new Statement();
  Token t1;
  Token t2;
  Token et;
}
{
  (
    t1=<SELECT> (t2=<ANYTHING>)+
    {
      cmd.setQueryable(true);
      cmd.setSql(extractOriginalText(t1, t2));
      et = t2;
    }
  |
    t1=<LOAD> (t2=<ANYTHING>)+
    {
      cmd.setQueryable(true);
      cmd.setSql(extractOriginalText(t1, t2));
      et = t2;
    }
  |
    t1=<CALL> (t2=<ANYTHING>)+
    {
      cmd.setQueryable(false);
      cmd.setSql(extractOriginalText(t1, t2));
      et = t2;
    }
  )
  (LOOKAHEAD(1) et=";")?
  {
    addCommand(cmd, t1, et);
  }
}
